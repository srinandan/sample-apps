// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../db/customers.json (426B)

package customersdata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _DbCustomersJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4f\x84\x30\x10\x85\xef\xfc\x8a\xa6\x67\xd9\x00\x02\xa2\x27\x37\x7a\xd1\xc3\x5e\x88\xa7\xcd\x1e\xba\x74\x56\x6a\x68\x87\xb4\xc3\x61\x63\xfc\xef\x66\xba\xa0\x8b\x91\x0b\xed\xf7\xde\xeb\x9b\xd9\x27\x42\x7c\x26\x42\x08\x21\xbb\x29\x10\x5a\xf0\x2f\x5a\x3e\x08\x59\x67\xfc\xc9\x9b\x8b\x76\x32\x3e\xd0\x4e\x59\x60\xe9\x15\x7b\xb7\x08\x83\xfa\xe5\xcf\x08\x0b\x6e\xdb\x1d\x93\xb2\xaa\xd3\xaa\xbe\x4b\x9b\xac\xf9\x79\x6a\xec\xd1\xb1\x7d\x1f\xaf\x4b\x7b\x94\xdc\x64\x8f\xe0\x39\x58\xe4\x45\x7a\x5b\x96\x69\xdd\x54\xf7\x73\x30\x3a\xe8\x3c\xc6\x2a\x8b\x47\x33\x80\x9c\x85\xaf\xf8\x3f\xcc\x05\x60\x95\x19\x02\x37\xc8\x0f\xec\x9d\x46\x78\x8c\x68\xd3\xa1\x95\x8b\x49\x69\xed\x21\x04\x08\xff\x4f\x12\xc8\x03\x50\xce\x55\x79\x96\x09\xab\x8c\x13\x81\x36\xd7\xa3\x5c\x2c\x05\x5b\xae\x71\x67\xe8\xcc\xac\x1d\xbd\x71\xef\x27\x03\x83\x5e\xa7\x14\xc5\x0d\x9e\xb6\xab\x14\x4e\x8e\x7c\x0c\xbe\xb5\xdb\x3f\x7b\x25\x7c\x3a\x7c\x07\x00\x00\xff\xff\x99\x7a\xa3\xf7\xaa\x01\x00\x00")

func DbCustomersJsonBytes() ([]byte, error) {
	return bindataRead(
		_DbCustomersJson,
		"../db/customers.json",
	)
}

func DbCustomersJson() (*asset, error) {
	bytes, err := DbCustomersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../db/customers.json", size: 426, mode: os.FileMode(0644), modTime: time.Unix(1578706399, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0xe3, 0x27, 0xc6, 0x79, 0x82, 0xbd, 0x75, 0x25, 0xf3, 0x46, 0xb, 0xd4, 0xfb, 0x14, 0x42, 0x18, 0xa2, 0x6a, 0xe6, 0xbc, 0xf2, 0xd9, 0x3b, 0x9a, 0xe5, 0xdc, 0xdd, 0xb8, 0xbb, 0xb0, 0xfa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../db/customers.json": DbCustomersJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"db": {nil, map[string]*bintree{
			"customers.json": {DbCustomersJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
