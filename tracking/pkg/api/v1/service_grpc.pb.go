// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/proto/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShipmentClient is the client API for Shipment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShipmentClient interface {
	// GetTracking gets a specific tracking identifier
	GetTracking(ctx context.Context, in *GetTrackingRequest, opts ...grpc.CallOption) (*Tracking, error)
	// ListTracking lists all the tracking objects
	ListTracking(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTrackingResponse, error)
	// NotifyTracking for testing streaming
	NotifyTracking(ctx context.Context, opts ...grpc.CallOption) (Shipment_NotifyTrackingClient, error)
}

type shipmentClient struct {
	cc grpc.ClientConnInterface
}

func NewShipmentClient(cc grpc.ClientConnInterface) ShipmentClient {
	return &shipmentClient{cc}
}

func (c *shipmentClient) GetTracking(ctx context.Context, in *GetTrackingRequest, opts ...grpc.CallOption) (*Tracking, error) {
	out := new(Tracking)
	err := c.cc.Invoke(ctx, "/sample_apps.v1.Shipment/GetTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentClient) ListTracking(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListTrackingResponse, error) {
	out := new(ListTrackingResponse)
	err := c.cc.Invoke(ctx, "/sample_apps.v1.Shipment/ListTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentClient) NotifyTracking(ctx context.Context, opts ...grpc.CallOption) (Shipment_NotifyTrackingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Shipment_ServiceDesc.Streams[0], "/sample_apps.v1.Shipment/NotifyTracking", opts...)
	if err != nil {
		return nil, err
	}
	x := &shipmentNotifyTrackingClient{stream}
	return x, nil
}

type Shipment_NotifyTrackingClient interface {
	Send(*GetTrackingRequest) error
	Recv() (*Tracking, error)
	grpc.ClientStream
}

type shipmentNotifyTrackingClient struct {
	grpc.ClientStream
}

func (x *shipmentNotifyTrackingClient) Send(m *GetTrackingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shipmentNotifyTrackingClient) Recv() (*Tracking, error) {
	m := new(Tracking)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShipmentServer is the server API for Shipment service.
// All implementations must embed UnimplementedShipmentServer
// for forward compatibility
type ShipmentServer interface {
	// GetTracking gets a specific tracking identifier
	GetTracking(context.Context, *GetTrackingRequest) (*Tracking, error)
	// ListTracking lists all the tracking objects
	ListTracking(context.Context, *emptypb.Empty) (*ListTrackingResponse, error)
	// NotifyTracking for testing streaming
	NotifyTracking(Shipment_NotifyTrackingServer) error
	mustEmbedUnimplementedShipmentServer()
}

// UnimplementedShipmentServer must be embedded to have forward compatible implementations.
type UnimplementedShipmentServer struct {
}

func (UnimplementedShipmentServer) GetTracking(context.Context, *GetTrackingRequest) (*Tracking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracking not implemented")
}
func (UnimplementedShipmentServer) ListTracking(context.Context, *emptypb.Empty) (*ListTrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTracking not implemented")
}
func (UnimplementedShipmentServer) NotifyTracking(Shipment_NotifyTrackingServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyTracking not implemented")
}
func (UnimplementedShipmentServer) mustEmbedUnimplementedShipmentServer() {}

// UnsafeShipmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShipmentServer will
// result in compilation errors.
type UnsafeShipmentServer interface {
	mustEmbedUnimplementedShipmentServer()
}

func RegisterShipmentServer(s grpc.ServiceRegistrar, srv ShipmentServer) {
	s.RegisterService(&Shipment_ServiceDesc, srv)
}

func _Shipment_GetTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServer).GetTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample_apps.v1.Shipment/GetTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServer).GetTracking(ctx, req.(*GetTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipment_ListTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServer).ListTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample_apps.v1.Shipment/ListTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServer).ListTracking(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipment_NotifyTracking_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShipmentServer).NotifyTracking(&shipmentNotifyTrackingServer{stream})
}

type Shipment_NotifyTrackingServer interface {
	Send(*Tracking) error
	Recv() (*GetTrackingRequest, error)
	grpc.ServerStream
}

type shipmentNotifyTrackingServer struct {
	grpc.ServerStream
}

func (x *shipmentNotifyTrackingServer) Send(m *Tracking) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shipmentNotifyTrackingServer) Recv() (*GetTrackingRequest, error) {
	m := new(GetTrackingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Shipment_ServiceDesc is the grpc.ServiceDesc for Shipment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shipment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample_apps.v1.Shipment",
	HandlerType: (*ShipmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTracking",
			Handler:    _Shipment_GetTracking_Handler,
		},
		{
			MethodName: "ListTracking",
			Handler:    _Shipment_ListTracking_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyTracking",
			Handler:       _Shipment_NotifyTracking_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/v1/service.proto",
}
